'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUradio=exports.AUcheckbox=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/control-input v2.2.2 *//***************************************************************************************************************************************************************
 *
 * control-input function
 *
 * Control inputs include radio buttons and checkboxes. They allow users to select one or more options.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * The checkbox component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} alt              - Add the alt variation class, optional
 * @param  {boolean} small            - Add the small variation class
 * @param  {boolean} block            - Add the block variation class
 * @param  {string}  label            - The label
 * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 *
 */var AUcheckbox=function AUcheckbox(_ref){var dark=_ref.dark,alt=_ref.alt,small=_ref.small,block=_ref.block,label=_ref.label,status=_ref.status,_ref$className=_ref.className,className=_ref$className===undefined?'':_ref$className,attributeOptions=_objectWithoutProperties(_ref,['dark','alt','small','block','label','status','className']);return _react2.default.createElement('label',{className:'au-control-input '+className+(''+(dark?' au-control-input--dark':''))+(''+(alt?' au-control-input--alt':''))+(''+(small?' au-control-input--small':''))+(''+(block?' au-control-input--block':''))+(''+(status==='valid'?' au-control-input--valid':''))+(''+(status==='invalid'?' au-control-input--invalid':''))},_react2.default.createElement('input',_extends({className:'au-control-input__input',type:'checkbox'},attributeOptions)),_react2.default.createElement('span',{className:'au-control-input__text'},label))};exports.AUcheckbox=AUcheckbox;AUcheckbox.propTypes={dark:_propTypes2.default.bool,alt:_propTypes2.default.bool,small:_propTypes2.default.bool,block:_propTypes2.default.bool,label:_propTypes2.default.string.isRequired,status:_propTypes2.default.oneOf(['valid','invalid']),className:_propTypes2.default.string};/**
 * The radio component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} alt              - Add the alt variation class, optional
 * @param  {boolean} small            - Add the small variation class
 * @param  {boolean} block            - Add the block variation class
 * @param  {string}  label            - The label
 * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUradio=function AUradio(_ref2){var dark=_ref2.dark,alt=_ref2.alt,small=_ref2.small,block=_ref2.block,label=_ref2.label,status=_ref2.status,_ref2$className=_ref2.className,className=_ref2$className===undefined?'':_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,['dark','alt','small','block','label','status','className']);return _react2.default.createElement('label',{className:'au-control-input '+className+(''+(dark?' au-control-input--dark':''))+(''+(alt?' au-control-input--alt':''))+(''+(small?' au-control-input--small':''))+(''+(block?' au-control-input--block':''))+(''+(status==='valid'?' au-control-input--valid':''))+(''+(status==='invalid'?' au-control-input--invalid':''))},_react2.default.createElement('input',_extends({className:'au-control-input__input',type:'radio'},attributeOptions)),_react2.default.createElement('span',{className:'au-control-input__text'},label))};exports.AUradio=AUradio;AUradio.propTypes={dark:_propTypes2.default.bool,alt:_propTypes2.default.bool,small:_propTypes2.default.bool,block:_propTypes2.default.bool,label:_propTypes2.default.string.isRequired,status:_propTypes2.default.oneOf(['valid','invalid']),className:_propTypes2.default.string};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,