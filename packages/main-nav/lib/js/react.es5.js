'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUmainNavContent=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _animate=require('@gov.au/animate');var _animate2=_interopRequireDefault(_animate);var _linkList=require('@gov.au/link-list');var _linkList2=_interopRequireDefault(_linkList);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}/*! @gov.au/main-nav v1.0.3 *//***************************************************************************************************************************************************************
 *
 * mainNav function
 *
 * Horizontal list of links to key areas on the website. Usually located in the header.
 *
 **************************************************************************************************************************************************************/// interdependency with our animate lib
// ES6 dependency: import AUlinkList from './link-list';
// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * A menu inside the AUmainNav
 *
 * @param  {array}  items            - The links in an array containing text, location and active status
 * @param  {string} linkComponent    - The component used for the link
 */var AUmainNavMenu=function AUmainNavMenu(_ref){var items=_ref.items,linkComponent=_ref.linkComponent;// Generate the menu
var GenerateMenu=function GenerateMenu(items){var menu=items.map(function(item){var link=item.active?{link:item.link,text:item.text,'aria-current':'page',li:{className:'active'}}:{link:item.link,text:item.text};// return the link, maybe with children
return link});return menu};// Create the menu with children
return _react2.default.createElement(_linkList2.default,{items:GenerateMenu(items),linkComponent:linkComponent})};AUmainNavMenu.propTypes={items:_propTypes2.default.arrayOf(_propTypes2.default.shape({link:_propTypes2.default.string,text:_propTypes2.default.node.isRequired,children:_propTypes2.default.array})).isRequired,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUmainNavMenu.defaultProps={linkComponent:'a'};// This value gets increased for each navigation component
var IDvalue=0;var AUmainNavContent=exports.AUmainNavContent=function(_React$PureComponent){_inherits(AUmainNavContent,_React$PureComponent);function AUmainNavContent(props){_classCallCheck(this,AUmainNavContent);var _this=_possibleConstructorReturn(this,(AUmainNavContent.__proto__||Object.getPrototypeOf(AUmainNavContent)).call(this,props));var items=props.items,_props$className=props.className,className=_props$className===undefined?'':_props$className,children=props.children,linkComponent=props.linkComponent,onOpen=props.onOpen,afterOpen=props.afterOpen,onClose=props.onClose,afterClose=props.afterClose,attributeOptions=_objectWithoutProperties(props,['items','className','children','linkComponent','onOpen','afterOpen','onClose','afterClose']);// Functions
_this.toggleClasses=_this.toggleClasses.bind(_this);_this.removeClass=_this.removeClass.bind(_this);_this.addClass=_this.addClass.bind(_this);_this.mainNavToggle=_this.mainNavToggle.bind(_this);_this.toggle=_this.toggle.bind(_this);_this.toggleAnimationState=function(){this.setState({animating:!this.state.animating})}.bind(_this);// Event listeners
_this.auFocusTrapListenerTop=_this.auFocusTrapListenerTop.bind(_this);_this.auFocusTrapListenerBottom=_this.auFocusTrapListenerBottom.bind(_this);_this.auKeyListener=_this.auKeyListener.bind(_this);// Variables
_this.state={closed:true,animating:false};// Increase the ID so it's unique for each instance
IDvalue+=1;_this.id='au-main-nav-'+IDvalue;return _this}/**
	 * Toggle an main navigation on click
	 *
	 * @param  {event object} event - The event object of the click
	 */_createClass(AUmainNavContent,[{key:'toggle',value:function toggle(event){event.preventDefault();// If the main menu is animating don't change toggle the menu
if(this.state.animating){return}// Toggle the menu's current state
this.setState({closed:!this.state.closed,animating:true})}/**
	 * componentDidUpdate - Update the component when it changes
	 *
	 * @param {*} prevProps - The previous property values
	 * @param {*} prevState - The previous state values
	 */},{key:'componentDidUpdate',value:function componentDidUpdate(prevProps,prevState){if(prevState!==undefined&&this.state!==undefined&&this.state.closed!==prevState.closed){this.mainNavToggle(this.mainNavContent,this.props.speed,{onOpen:this.props.onOpen,afterOpen:this.props.afterOpen,onClose:this.props.onClose,afterClose:this.props.afterClose})}}/**
	 * IE8 compatible function for replacing classes on a DOM node
	 *
	 * @param  {object} element       - The DOM element we want to toggle classes on
	 * @param  {string} openingClass  - The firstClass you want to toggle on the DOM node
	 * @param  {string} closingClass  - The secondClass you want to toggle on the DOM node
	 */},{key:'toggleClasses',value:function toggleClasses(element,state,openingClass,closingClass){if(state==='opening'||state==='open'){var oldClass=openingClass||'au-main-nav__content--closed';var newClass=closingClass||'au-main-nav__content--open'}else{var oldClass=closingClass||'au-main-nav__content--open';var newClass=openingClass||'au-main-nav__content--closed'}this.removeClass(element,oldClass);this.addClass(element,newClass)}/**
	 * IE8 compatible function for removing a class
	 *
	 * @param  {object} element   - The DOM element we want to manipulate
	 * @param  {object} className - The name of the class to be removed
	 */},{key:'removeClass',value:function removeClass(element,className){if(element.classList){element.classList.remove(className)}else{element.className=element.className.replace(new RegExp('(^|\\b)'+className.split(' ').join('|')+'(\\b|$)','gi'),' ')}}/**
	 * IE8 compatible function for adding a class
	 *
	 * @param  {object} element   - The DOM element we want to manipulate
	 * @param  {object} className - The name of the class to be added
	 */},{key:'addClass',value:function addClass(element,className){if(element.classList){element.classList.add(className)}else{element.className=element.className+' '+className}}/**
	 * auFocusTrapListenerTop - What happens when the focus trap top gets focus
	 *
	 * @param {event} event - the event
	 */},{key:'auFocusTrapListenerTop',value:function auFocusTrapListenerTop(event){var focusContent=this.mainNavMenu.querySelectorAll('a, .au-main-nav__toggle');focusContent[focusContent.length-1].focus()}/**
	 * auFocusTrapListenerBottom - What happens when the focus trap bottom gets focus
	 *
	 * @param {event} event - the event
	 */},{key:'auFocusTrapListenerBottom',value:function auFocusTrapListenerBottom(event){var focusContent=this.mainNavMenu.querySelectorAll('a, .au-main-nav__toggle');focusContent[0].focus()}/**
	 * auKeyListener - What happens when a key gets pressed and the menu is open
	 *
	 * @param {event} event - the event
	 */},{key:'auKeyListener',value:function auKeyListener(event){// This should only close the menu when the menu is visibly open
var overlayOpen=window.getComputedStyle(this.mainNavOverlay).getPropertyValue('display');// Check the menu is open and visible and the escape key is pressed
if(event.keyCode===27&&overlayOpen==='block'){this.toggle(event)}}/**
	 * Toggle a mainNav element
	 *
	 * @param  {string}  element  - The toggle for the main nav
	 * @param  {integer} speed    - The speed in ms for the animation
	 *
	 */},{key:'mainNavToggle',value:function mainNavToggle(element,speed,callbacks){// stop event propagation
try{window.event.cancelBubble=true;event.stopPropagation()}catch(error){}// check this once
if((typeof callbacks==='undefined'?'undefined':_typeof(callbacks))!='object'){callbacks={}}// Elements we modify
var menu=this.mainNavMenu;var overlay=this.mainNavOverlay;var closeButton=element.querySelector('.au-main-nav__toggle--close');var openButton=element.querySelector('.au-main-nav__toggle--open');var focustrapTop=element.querySelector('.au-main-nav__focus-trap-top');var focustrapBottom=element.querySelector('.au-main-nav__focus-trap-bottom');var closed=!this.state.closed;var state=closed?'opening':'';var menuWidth=menu.offsetWidth;// Functions
var ToggleClasses=this.toggleClasses;var AUkeyListener=this.auKeyListener;var AUfocusTrapListenerTop=this.auFocusTrapListenerTop;var AUfocusTrapListenerBottom=this.auFocusTrapListenerBottom;var ToggleAnimationState=this.toggleAnimationState;overlay.style.display='block';(function(menu){_animate2.default.animate.Toggle({element:menu,property:'left',openSize:0,closeSize:-1*menuWidth,speed:speed||250,prefunction:function prefunction(){// Set these value immediately for transitions
if(state==='opening'){menu.style.display='block';overlay.style.left=0;overlay.style.opacity=0.5;// run when opening
if(typeof callbacks.onOpen==='function'){callbacks.onOpen()}}else{overlay.style.opacity='0';// run when closing
if(typeof callbacks.onClose==='function'){callbacks.onClose()}}},postfunction:function postfunction(){if(state==='opening'){// Move the focus to the close button
closeButton.focus();// Focus trap enabled
focustrapTop.setAttribute('tabindex',0);focustrapBottom.setAttribute('tabindex',0);focustrapTop.addEventListener('focus',AUfocusTrapListenerTop);focustrapBottom.addEventListener('focus',AUfocusTrapListenerBottom);// Add key listener
document.addEventListener('keyup',AUkeyListener);if(typeof callbacks.afterOpen==='function'){callbacks.afterOpen()}}else{// Move the focus back to the menu button
openButton.focus();// Remove the focus trap
focustrapTop.removeAttribute('tabindex');focustrapBottom.removeAttribute('tabindex');// Remove the event listeners
focustrapTop.removeEventListener('focus',AUfocusTrapListenerTop);focustrapBottom.removeEventListener('focus',AUfocusTrapListenerBottom);// Remove the event listener for the keypress
document.removeEventListener('keyup',AUkeyListener);if(typeof callbacks.afterClose==='function'){callbacks.afterClose()}}// Toggle classes
ToggleClasses(element,state);ToggleClasses(document.body,state,'au-main-nav__scroll--unlocked','au-main-nav__scroll--locked');// Reset inline styles
menu.style.display='';menu.style.left='';overlay.style.display='';overlay.style.left='';overlay.style.opacity='';// Toggle the animating state to false so that we can allow toggling again
ToggleAnimationState()}})})(menu)}},{key:'render',value:function render(){var _this2=this;return _react2.default.createElement('div',{id:this.id,className:'au-main-nav__content',ref:function ref(mainNavContent){_this2.mainNavContent=mainNavContent}},_react2.default.createElement('button',{'aria-controls':this.id,onClick:function onClick(event){return _this2.toggle(event)},className:'au-main-nav__toggle au-main-nav__toggle--open'},'Menu'),_react2.default.createElement('div',{className:'au-main-nav__menu',ref:function ref(mainNavMenu){_this2.mainNavMenu=mainNavMenu}},_react2.default.createElement('div',{className:'au-main-nav__menu-inner'},_react2.default.createElement('div',{className:'au-main-nav__focus-trap-top'}),_react2.default.createElement('button',{'aria-controls':this.id,onClick:function onClick(event){return _this2.toggle(event)},className:'au-main-nav__toggle au-main-nav__toggle--close'},'Close'),_react2.default.createElement(AUmainNavMenu,{linkComponent:this.props.linkComponent,items:this.props.items}),this.props.children,_react2.default.createElement('div',{className:'au-main-nav__focus-trap-bottom'}))),_react2.default.createElement('div',{'aria-controls':this.id,ref:function ref(mainNavOverlay){_this2.mainNavOverlay=mainNavOverlay},onClick:function onClick(event){return _this2.toggle(event)},className:'au-main-nav__overlay'}))}}]);return AUmainNavContent}(_react2.default.PureComponent);;AUmainNavContent.propTypes={dark:_propTypes2.default.bool,alt:_propTypes2.default.bool,children:_propTypes2.default.node,speed:_propTypes2.default.number,onOpen:_propTypes2.default.func,afterOpen:_propTypes2.default.func,onClose:_propTypes2.default.func,afterClose:_propTypes2.default.func,className:_propTypes2.default.string};var AUmainNav=function AUmainNav(_ref2){var dark=_ref2.dark,alt=_ref2.alt,className=_ref2.className,ariaLabel=_ref2.ariaLabel,children=_ref2.children,attributeOptions=_objectWithoutProperties(_ref2,['dark','alt','className','ariaLabel','children']);return _react2.default.createElement('nav',_extends({className:'au-main-nav '+(''+(dark?' au-main-nav--dark':''))+(''+(alt?' au-main-nav--alt':''))+(''+(className?' '+className:'')),'aria-label':ariaLabel},attributeOptions),children)};AUmainNav.propTypes={dark:_propTypes2.default.bool,alt:_propTypes2.default.bool,ariaLabel:_propTypes2.default.string,children:_propTypes2.default.node.isRequired};AUmainNav.defaultProps={ariaLabel:'main navigation'};exports.default=AUmainNav;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,