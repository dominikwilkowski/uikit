'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUprogressIndicatorItem=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/progress-indicator v3.1.5 *//***************************************************************************************************************************************************************
 *
 * progress-indicator function
 *
 * Indicator of progress through a multitude of pages mostly used for forms.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * All status options, can be overwritten
 *
 * @type {Object}
 */var StatusText={doing:'Doing',todo:'To do',done:'Done'};/**
 * An item inside the AUprogressIndicator component
 *
 * @param  {string}   link             - The link URL, If no link is passed we render a button instead of a link tag, optional
 * @param  {string}  linkComponent     - The component used for the link
 * @param  {string}   text             - The text of this item
 * @param  {string}   status           - The status of this item
 * @param  {string}   statusText       - The status text of this item, optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   li               - An additional object to be spread into the wrapping element, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUprogressIndicatorItem=function AUprogressIndicatorItem(_ref){var link=_ref.link,linkComponent=_ref.linkComponent,text=_ref.text,status=_ref.status,statusText=_ref.statusText,_ref$className=_ref.className,className=_ref$className===undefined?'':_ref$className,_ref$li=_ref.li,li=_ref$li===undefined?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,['link','linkComponent','text','status','statusText','className','li']);var LinkComponent=linkComponent;if(link){// If we are using a normal link
if(LinkComponent==='a'){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==='function'){attributeOptions.to=link}}return _react2.default.createElement('li',li,link?_react2.default.createElement(LinkComponent,_extends({className:'au-progress-indicator__link au-progress-indicator__link--'+status+' '+className},attributeOptions),_react2.default.createElement('span',{className:'au-progress-indicator__status'},statusText?statusText:StatusText[status]),text):_react2.default.createElement('button',_extends({className:'au-progress-indicator__link au-progress-indicator__link--'+status+' '+className},attributeOptions),_react2.default.createElement('span',{className:'au-progress-indicator__status'},statusText?statusText:StatusText[status]),text))};exports.AUprogressIndicatorItem=AUprogressIndicatorItem;AUprogressIndicatorItem.propTypes={link:_propTypes2.default.string,text:_propTypes2.default.string.isRequired,status:_propTypes2.default.PropTypes.oneOf(['doing','todo','done']).isRequired,statusText:_propTypes2.default.string,li:_propTypes2.default.object,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUprogressIndicatorItem.defaultProps={linkComponent:'a'};/**
 * DEFAULT
 * The progress-indicator component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {array}   items            - All items for this progress indicator
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUprogressIndicator=function AUprogressIndicator(_ref2){var dark=_ref2.dark,linkComponent=_ref2.linkComponent,items=_ref2.items,_ref2$className=_ref2.className,className=_ref2$className===undefined?'':_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,['dark','linkComponent','items','className']);return _react2.default.createElement('ul',_extends({className:'au-progress-indicator'+(dark?' au-progress-indicator--dark':'')+' '+className},attributeOptions),items.map(function(item,i){return _react2.default.createElement(AUprogressIndicatorItem,_extends({linkComponent:linkComponent,key:i},item))}))};AUprogressIndicator.propTypes={dark:_propTypes2.default.bool,items:_propTypes2.default.arrayOf(_propTypes2.default.shape({link:_propTypes2.default.string,text:_propTypes2.default.string.isRequired,status:_propTypes2.default.PropTypes.oneOf(['doing','todo','done']).isRequired,statusText:_propTypes2.default.string,li:_propTypes2.default.object})).isRequired,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUprogressIndicator.defaultProps={linkComponent:'a'};exports.default=AUprogressIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,