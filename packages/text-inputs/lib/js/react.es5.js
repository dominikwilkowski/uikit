'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/text-inputs v2.0.10 *//***************************************************************************************************************************************************************
 *
 * text-input function
 *
 * Text inputs include text inputs, labels, hints and textareas. They allow users to input data into a field.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * DEFAULT
 * The AUtextInput component
 *
 * @param  {string}  as               - The kind of input, can be either 'input' or 'textarea', default: 'input'
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {boolean} block            - Add the block variation class, optional
 * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional
 * @param  {string}  type             - The type of the field, optional, default: text
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtextInput=function AUtextInput(_ref){var as=_ref.as,dark=_ref.dark,block=_ref.block,status=_ref.status,_ref$type=_ref.type,type=_ref$type===undefined?'text':_ref$type,_ref$className=_ref.className,className=_ref$className===undefined?'':_ref$className,attributeOptions=_objectWithoutProperties(_ref,['as','dark','block','status','type','className']);return as==='textarea'?_react2.default.createElement('textarea',_extends({className:'au-text-input '+className+(''+(block?' au-text-input--block':''))+(''+(dark?' au-text-input--dark':''))+(''+(status==='valid'?' au-text-input--valid':''))+(''+(status==='invalid'?' au-text-input--invalid':''))},attributeOptions)):_react2.default.createElement('input',_extends({className:'au-text-input '+className+(''+(dark?' au-text-input--dark':''))+(''+(block?' au-text-input--block':''))+(''+(status==='valid'?' au-text-input--valid':''))+(''+(status==='invalid'?' au-text-input--invalid':'')),type:type},attributeOptions))};AUtextInput.propTypes={as:_propTypes2.default.oneOf(['input','textarea']),dark:_propTypes2.default.bool,block:_propTypes2.default.bool,status:_propTypes2.default.oneOf(['valid','invalid']),className:_propTypes2.default.string};AUtextInput.defaultProps={as:'input'};exports.default=AUtextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVXRleHRJbnB1dCIsImFzIiwiZGFyayIsImJsb2NrIiwic3RhdHVzIiwidHlwZSIsImNsYXNzTmFtZSIsImF0dHJpYnV0ZU9wdGlvbnMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvbmVPZiIsImJvb2wiLCJzdHJpbmciLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJvU0FTQSw0QiwyQ0FDQSxxQyxtREFNQSw2QixxUkFoQkEsa0NBQ0E7Ozs7OztnS0FZQTtBQUNBO0FBQ0E7QUFJQTs7Ozs7Ozs7Ozs7R0FZQSxHQUFNQSxhQUFjLFFBQWRBLFlBQWMsVUFBR0MsR0FBSCxNQUFHQSxFQUFILENBQU9DLElBQVAsTUFBT0EsSUFBUCxDQUFhQyxLQUFiLE1BQWFBLEtBQWIsQ0FBb0JDLE1BQXBCLE1BQW9CQSxNQUFwQixnQkFBNEJDLElBQTVCLENBQTRCQSxJQUE1Qix1QkFBbUMsTUFBbkMsK0JBQTJDQyxTQUEzQyxDQUEyQ0EsU0FBM0MsNEJBQXVELEVBQXZELGdCQUE4REMsZ0JBQTlELHdGQUNuQk4sTUFBTyxVQUFQLENBQ0csbURBQ0EsVUFDQyxpQkFBa0JLLFNBQWxCLE1BQ0lILE1BQVEsdUJBQVIsQ0FBa0MsRUFEdEMsUUFFSUQsS0FBTyxzQkFBUCxDQUFnQyxFQUZwQyxRQUdJRSxTQUFXLE9BQVgsQ0FBcUIsdUJBQXJCLENBQStDLEVBSG5ELFFBSUlBLFNBQVcsU0FBWCxDQUF1Qix5QkFBdkIsQ0FBbUQsRUFKdkQsRUFGRCxFQVFLRyxnQkFSTCxFQURILENBV0csZ0RBQU8sVUFDTixpQkFBa0JELFNBQWxCLE1BQ0lKLEtBQU8sc0JBQVAsQ0FBZ0MsRUFEcEMsUUFFSUMsTUFBUSx1QkFBUixDQUFrQyxFQUZ0QyxRQUdJQyxTQUFXLE9BQVgsQ0FBcUIsdUJBQXJCLENBQStDLEVBSG5ELFFBSUlBLFNBQVcsU0FBWCxDQUF1Qix5QkFBdkIsQ0FBbUQsRUFKdkQsRUFERCxDQU9BLEtBQU9DLElBUFAsRUFPbUJFLGdCQVBuQixFQVpnQixDQUFwQixDQXVCQVAsWUFBWVEsU0FBWixDQUF3QixDQUN2QlAsR0FBSVEsb0JBQVVDLEtBQVYsQ0FBZ0IsQ0FBRSxPQUFGLENBQVcsVUFBWCxDQUFoQixDQURtQixDQUV2QlIsS0FBTU8sb0JBQVVFLElBRk8sQ0FHdkJSLE1BQU9NLG9CQUFVRSxJQUhNLENBSXZCUCxPQUFRSyxvQkFBVUMsS0FBVixDQUFnQixDQUFFLE9BQUYsQ0FBVyxTQUFYLENBQWhCLENBSmUsQ0FLdkJKLFVBQVdHLG9CQUFVRyxNQUxFLENBQXhCLENBUUFaLFlBQVlhLFlBQVosQ0FBMkIsQ0FDMUJaLEdBQUksT0FEc0IsQ0FBM0IsQyxnQkFJZUQsVyIsImZpbGUiOiJyZWFjdC5lczUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGdvdi5hdS90ZXh0LWlucHV0cyB2Mi4wLjEwICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogdGV4dC1pbnB1dCBmdW5jdGlvblxuICpcbiAqIFRleHQgaW5wdXRzIGluY2x1ZGUgdGV4dCBpbnB1dHMsIGxhYmVscywgaGludHMgYW5kIHRleHRhcmVhcy4gVGhleSBhbGxvdyB1c2VycyB0byBpbnB1dCBkYXRhIGludG8gYSBmaWVsZC5cbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG5cbi8qKlxuICogREVGQVVMVFxuICogVGhlIEFVdGV4dElucHV0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIGFzICAgICAgICAgICAgICAgLSBUaGUga2luZCBvZiBpbnB1dCwgY2FuIGJlIGVpdGhlciAnaW5wdXQnIG9yICd0ZXh0YXJlYScsIGRlZmF1bHQ6ICdpbnB1dCdcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGRhcmsgICAgICAgICAgICAgLSBBZGQgdGhlIGRhcmsgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7Ym9vbGVhbn0gYmxvY2sgICAgICAgICAgICAtIEFkZCB0aGUgYmxvY2sgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RhdHVzICAgICAgICAgICAtIE1hcmsgdGhpcyBmaWVsZCBhcyBlaXRoZXIgJ3ZhbGlkJyBvciAnaW52YWxpZCcsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICB0eXBlICAgICAgICAgICAgIC0gVGhlIHR5cGUgb2YgdGhlIGZpZWxkLCBvcHRpb25hbCwgZGVmYXVsdDogdGV4dFxuICogQHBhcmFtICB7c3RyaW5nfSAgY2xhc3NOYW1lICAgICAgICAtIEFuIGFkZGl0aW9uYWwgY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtvYmplY3R9ICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zXG4gKi9cbmNvbnN0IEFVdGV4dElucHV0ID0gKHsgYXMsIGRhcmssIGJsb2NrLCBzdGF0dXMsIHR5cGUgPSAndGV4dCcsIGNsYXNzTmFtZSA9ICcnLCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IChcblx0YXMgPT09ICd0ZXh0YXJlYSdcblx0XHQ/IDx0ZXh0YXJlYVxuXHRcdFx0XHRjbGFzc05hbWU9e1xuXHRcdFx0XHRcdGBhdS10ZXh0LWlucHV0ICR7IGNsYXNzTmFtZSB9YCArXG5cdFx0XHRcdFx0YCR7IGJsb2NrID8gJyBhdS10ZXh0LWlucHV0LS1ibG9jaycgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IGRhcmsgPyAnIGF1LXRleHQtaW5wdXQtLWRhcmsnIDogJycgfWAgK1xuXHRcdFx0XHRcdGAkeyBzdGF0dXMgPT09ICd2YWxpZCcgPyAnIGF1LXRleHQtaW5wdXQtLXZhbGlkJyA6ICcnIH1gICtcblx0XHRcdFx0XHRgJHsgc3RhdHVzID09PSAnaW52YWxpZCcgPyAnIGF1LXRleHQtaW5wdXQtLWludmFsaWQnIDogJycgfWBcblx0XHRcdFx0fVxuXHRcdFx0XHR7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSA+XG5cdFx0XHQ8L3RleHRhcmVhPlxuXHRcdDogPGlucHV0IGNsYXNzTmFtZT17XG5cdFx0XHRcdFx0YGF1LXRleHQtaW5wdXQgJHsgY2xhc3NOYW1lIH1gICtcblx0XHRcdFx0XHRgJHsgZGFyayA/ICcgYXUtdGV4dC1pbnB1dC0tZGFyaycgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IGJsb2NrID8gJyBhdS10ZXh0LWlucHV0LS1ibG9jaycgOiAnJyB9YCArXG5cdFx0XHRcdFx0YCR7IHN0YXR1cyA9PT0gJ3ZhbGlkJyA/ICcgYXUtdGV4dC1pbnB1dC0tdmFsaWQnIDogJycgfWAgK1xuXHRcdFx0XHRcdGAkeyBzdGF0dXMgPT09ICdpbnZhbGlkJyA/ICcgYXUtdGV4dC1pbnB1dC0taW52YWxpZCcgOiAnJyB9YFxuXHRcdFx0XHR9XG5cdFx0XHRcdHR5cGU9eyB0eXBlIH0geyAuLi5hdHRyaWJ1dGVPcHRpb25zIH1cblx0XHRcdC8+XG4pO1xuXG5BVXRleHRJbnB1dC5wcm9wVHlwZXMgPSB7XG5cdGFzOiBQcm9wVHlwZXMub25lT2YoWyAnaW5wdXQnLCAndGV4dGFyZWEnIF0pLFxuXHRkYXJrOiBQcm9wVHlwZXMuYm9vbCxcblx0YmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXHRzdGF0dXM6IFByb3BUeXBlcy5vbmVPZihbICd2YWxpZCcsICdpbnZhbGlkJyBdKSxcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuQVV0ZXh0SW5wdXQuZGVmYXVsdFByb3BzID0ge1xuXHRhczogJ2lucHV0Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFVdGV4dElucHV0O1xuIl19