'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUkeywordListItem=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/keyword-list v3.0.3 *//***************************************************************************************************************************************************************
 *
 * keyword-list function
 *
 * Headers provide a consistent start to pages.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * An item inside the AUkeywordList component
 *
 * @param  {string}   repeatedName     - The repeated bit in each item
 * @param  {string}   link             - The link URL, optional
 * @param  {string}   linkComponent    - The component used for the link
 * @param  {string}   name             - The name of the item
 * @param  {object}   li               - An additional object to be spread into the wrapping element, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUkeywordListItem=function AUkeywordListItem(_ref){var linkComponent=_ref.linkComponent,repeatedName=_ref.repeatedName,link=_ref.link,name=_ref.name,_ref$li=_ref.li,li=_ref$li===undefined?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,['linkComponent','repeatedName','link','name','li']);var LinkComponent=linkComponent;if(typeof attributeOptions.onClick==='function'){// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link='#'}}if(link){// If we are using a normal link
if(LinkComponent==='a'){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==='function'){attributeOptions.to=link}}return _react2.default.createElement('li',li,link?_react2.default.createElement(LinkComponent,attributeOptions,_react2.default.createElement('small',{className:'au-keyword-list__small'},repeatedName),name):_react2.default.createElement('span',null,_react2.default.createElement('small',{className:'au-keyword-list__small'},repeatedName),name))};exports.AUkeywordListItem=AUkeywordListItem;AUkeywordListItem.propTypes={repeatedName:_propTypes2.default.string.isRequired,link:_propTypes2.default.string,name:_propTypes2.default.string.isRequired,li:_propTypes2.default.object,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUkeywordListItem.defaultProps={linkComponent:'a'};/**
 * DEFAULT
 * The keyword-list component
 *
 * @param  {string}  repeatedName     - The repeated bit in each item
 * @param  {array}   items            - All items in this list, format: { link: '', name: '', onClick: () }
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUkeywordList=function AUkeywordList(_ref2){var repeatedName=_ref2.repeatedName,linkComponent=_ref2.linkComponent,items=_ref2.items,dark=_ref2.dark,_ref2$className=_ref2.className,className=_ref2$className===undefined?'':_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,['repeatedName','linkComponent','items','dark','className']);return _react2.default.createElement('ul',_extends({className:'au-keyword-list au-link-list '+className+(dark?' au-keyword-list--dark':'')+' '},attributeOptions),items.map(function(item,i){return _react2.default.createElement(AUkeywordListItem,_extends({linkComponent:linkComponent,key:i,repeatedName:repeatedName},item))}))};AUkeywordList.propTypes={repeatedName:_propTypes2.default.string.isRequired,dark:_propTypes2.default.bool,items:_propTypes2.default.arrayOf(_propTypes2.default.shape({link:_propTypes2.default.string,name:_propTypes2.default.string.isRequired,li:_propTypes2.default.object})).isRequired,className:_propTypes2.default.string,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUkeywordList.defaultProps={linkComponent:'a'};exports.default=AUkeywordList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,