'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/buttons v3.0.5 *//***************************************************************************************************************************************************************
 *
 * buttons function
 *
 * Buttons signal action. Use them to move the user through the service.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * All different kind of button options
 *
 * @type {Object}
 */var options={'primary':'','secondary':'au-btn--secondary','tertiary':'au-btn--tertiary'};/**
 * DEFAULT
 * The primary button
 *
 * @param  {string}   linkComponent    - The component used for the link
 * @param  {string}   link             - If this is a link the location it goes
 * @param  {string}   children         - Anything inside
 * @param  {string}   as               - The kind of button, can be either 'primary', 'secondary', 'tertiary', default: 'primary'
 * @param  {boolean}  dark             - Add the dark variation class, optional
 * @param  {string}   type             - The type attribute, default: 'button', optional
 * @param  {boolean}  block            - The block option, optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUbutton=function AUbutton(_ref){var linkComponent=_ref.linkComponent,link=_ref.link,children=_ref.children,as=_ref.as,dark=_ref.dark,type=_ref.type,block=_ref.block,_ref$className=_ref.className,className=_ref$className===undefined?'':_ref$className,attributeOptions=_objectWithoutProperties(_ref,['linkComponent','link','children','as','dark','type','block','className']);if(link){var LinkComponent=linkComponent;// If we are using a normal link
if(LinkComponent==='a'){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==='function'){attributeOptions.to=link}return _react2.default.createElement(LinkComponent,_extends({className:'au-btn '+className+' '+options[as]+(block?' au-btn--block':'')+(dark?' au-btn--dark':'')},attributeOptions),children)}else{return _react2.default.createElement('button',_extends({type:type,className:'au-btn '+className+' '+options[as]+(block?' au-btn--block':'')+(dark?' au-btn--dark':'')},attributeOptions),children)}};AUbutton.propTypes={link:_propTypes2.default.string,children:_propTypes2.default.node.isRequired,as:_propTypes2.default.oneOf(['primary','secondary','tertiary']).isRequired,dark:_propTypes2.default.bool,type:_propTypes2.default.string,block:_propTypes2.default.bool,className:_propTypes2.default.string,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUbutton.defaultProps={type:'button',as:'primary',linkComponent:'a'};exports.default=AUbutton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJvcHRpb25zIiwiQVVidXR0b24iLCJsaW5rQ29tcG9uZW50IiwibGluayIsImNoaWxkcmVuIiwiYXMiLCJkYXJrIiwidHlwZSIsImJsb2NrIiwiY2xhc3NOYW1lIiwiYXR0cmlidXRlT3B0aW9ucyIsIkxpbmtDb21wb25lbnQiLCJocmVmIiwidG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJub2RlIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJvU0FTQSw0QiwyQ0FDQSxxQyxtREFNQSw2QixxUkFoQkEsNkJBQ0E7Ozs7OztnS0FZQTtBQUNBO0FBQ0E7QUFJQTs7OztHQUtBLEdBQU1BLFNBQVUsQ0FDZixVQUFXLEVBREksQ0FFZixZQUFhLG1CQUZFLENBR2YsV0FBWSxrQkFIRyxDQUFoQixDQU9BOzs7Ozs7Ozs7Ozs7O0dBY0EsR0FBTUMsVUFBVyxRQUFYQSxTQUFXLE1BQW1HLElBQWhHQyxjQUFnRyxNQUFoR0EsYUFBZ0csQ0FBakZDLElBQWlGLE1BQWpGQSxJQUFpRixDQUEzRUMsUUFBMkUsTUFBM0VBLFFBQTJFLENBQWpFQyxFQUFpRSxNQUFqRUEsRUFBaUUsQ0FBN0RDLElBQTZELE1BQTdEQSxJQUE2RCxDQUF2REMsSUFBdUQsTUFBdkRBLElBQXVELENBQWpEQyxLQUFpRCxNQUFqREEsS0FBaUQscUJBQTFDQyxTQUEwQyxDQUExQ0EsU0FBMEMsNEJBQTlCLEVBQThCLGdCQUF2QkMsZ0JBQXVCLDJHQUNuSCxHQUFJUCxJQUFKLENBQVcsQ0FDVixHQUFNUSxlQUFnQlQsYUFBdEIsQ0FFQTtBQUNBLEdBQUlTLGdCQUFrQixHQUF0QixDQUE0QixDQUMzQkQsaUJBQWlCRSxJQUFqQixDQUF3QlQsSUFDeEIsQ0FDRDtBQUhBLElBSUssSUFBSSxNQUFPUSxjQUFQLEdBQXlCLFVBQTdCLENBQTBDLENBQzlDRCxpQkFBaUJHLEVBQWpCLENBQXNCVixJQUN0QixDQUVELE1BQ0MsK0JBQUMsYUFBRCxXQUNDLG9CQUF1Qk0sU0FBdkIsS0FBc0NULFFBQVNLLEVBQVQsQ0FBdEMsRUFBd0RHLE1BQVEsZ0JBQVIsQ0FBMkIsRUFBbkYsR0FBMEZGLEtBQU8sZUFBUCxDQUF5QixFQUFuSCxDQURELEVBRU1JLGdCQUZOLEVBSUdOLFFBSkgsQ0FPRCxDQXBCRCxJQXFCSyxDQUNKLE1BQ0Msa0RBQ0MsS0FBT0csSUFEUixDQUVDLG9CQUF1QkUsU0FBdkIsS0FBc0NULFFBQVNLLEVBQVQsQ0FBdEMsRUFBd0RHLE1BQVEsZ0JBQVIsQ0FBMkIsRUFBbkYsR0FBMEZGLEtBQU8sZUFBUCxDQUF5QixFQUFuSCxDQUZELEVBR01JLGdCQUhOLEVBS0dOLFFBTEgsQ0FRRCxDQUNELENBakNELENBbUNBSCxTQUFTYSxTQUFULENBQXFCLENBQ3BCWCxLQUFNWSxvQkFBVUMsTUFESSxDQUVwQlosU0FBVVcsb0JBQVVFLElBQVYsQ0FBZUMsVUFGTCxDQUdwQmIsR0FBSVUsb0JBQVVJLEtBQVYsQ0FBZ0IsQ0FBRSxTQUFGLENBQWEsV0FBYixDQUEwQixVQUExQixDQUFoQixFQUF3REQsVUFIeEMsQ0FJcEJaLEtBQU1TLG9CQUFVSyxJQUpJLENBS3BCYixLQUFNUSxvQkFBVUMsTUFMSSxDQU1wQlIsTUFBT08sb0JBQVVLLElBTkcsQ0FPcEJYLFVBQVdNLG9CQUFVQyxNQVBELENBUXBCZCxjQUFlYSxvQkFBVU0sU0FBVixDQUFvQixDQUFFTixvQkFBVUMsTUFBWixDQUFvQkQsb0JBQVVPLElBQTlCLENBQXBCLENBUkssQ0FBckIsQ0FXQXJCLFNBQVNzQixZQUFULENBQXdCLENBQ3ZCaEIsS0FBTSxRQURpQixDQUV2QkYsR0FBSSxTQUZtQixDQUd2QkgsY0FBZSxHQUhRLENBQXhCLEMsZ0JBTWVELFEiLCJmaWxlIjoicmVhY3QuZXM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb3YuYXUvYnV0dG9ucyB2My4wLjUgKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiBidXR0b25zIGZ1bmN0aW9uXG4gKlxuICogQnV0dG9ucyBzaWduYWwgYWN0aW9uLiBVc2UgdGhlbSB0byBtb3ZlIHRoZSB1c2VyIHRocm91Z2ggdGhlIHNlcnZpY2UuXG4gKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5cbi8vIFRoZSBmb2xsb3dpbmcgbGluZSB3aWxsIGJlIHJlcGxhY2VkIGF1dG9tYXRpY2FsbHkgd2l0aCBnZW5lcmljIGltcG9ydHMgZm9yIHRoZSBFUzUgcGlwZWxpbmUuXG4vLyBZb3UgY2FuIHNhZmVseSBpZ25vcmUgdGhpcyBiaXQgaWYgeW91IHVzZSB0aGlzIG1vZHVsZSB3aXRoIHBhbmNha2Vcbi8vXG5pbXBvcnQgJy4uL2Nzcy9zdHlsZXMuY3NzJztcblxuXG4vKipcbiAqIEFsbCBkaWZmZXJlbnQga2luZCBvZiBidXR0b24gb3B0aW9uc1xuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNvbnN0IG9wdGlvbnMgPSB7XG5cdCdwcmltYXJ5JzogJycsXG5cdCdzZWNvbmRhcnknOiAnYXUtYnRuLS1zZWNvbmRhcnknLFxuXHQndGVydGlhcnknOiAnYXUtYnRuLS10ZXJ0aWFyeScsXG59O1xuXG5cbi8qKlxuICogREVGQVVMVFxuICogVGhlIHByaW1hcnkgYnV0dG9uXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgIGxpbmtDb21wb25lbnQgICAgLSBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBsaW5rXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgbGluayAgICAgICAgICAgICAtIElmIHRoaXMgaXMgYSBsaW5rIHRoZSBsb2NhdGlvbiBpdCBnb2VzXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgY2hpbGRyZW4gICAgICAgICAtIEFueXRoaW5nIGluc2lkZVxuICogQHBhcmFtICB7c3RyaW5nfSAgIGFzICAgICAgICAgICAgICAgLSBUaGUga2luZCBvZiBidXR0b24sIGNhbiBiZSBlaXRoZXIgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RlcnRpYXJ5JywgZGVmYXVsdDogJ3ByaW1hcnknXG4gKiBAcGFyYW0gIHtib29sZWFufSAgZGFyayAgICAgICAgICAgICAtIEFkZCB0aGUgZGFyayB2YXJpYXRpb24gY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgdHlwZSAgICAgICAgICAgICAtIFRoZSB0eXBlIGF0dHJpYnV0ZSwgZGVmYXVsdDogJ2J1dHRvbicsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtib29sZWFufSAgYmxvY2sgICAgICAgICAgICAtIFRoZSBibG9jayBvcHRpb24sIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgY2xhc3NOYW1lICAgICAgICAtIEFuIGFkZGl0aW9uYWwgY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtvYmplY3R9ICAgYXR0cmlidXRlT3B0aW9ucyAtIEFueSBvdGhlciBhdHRyaWJ1dGUgb3B0aW9uc1xuICovXG5jb25zdCBBVWJ1dHRvbiA9ICh7IGxpbmtDb21wb25lbnQsIGxpbmssIGNoaWxkcmVuLCBhcywgZGFyaywgdHlwZSwgYmxvY2ssIGNsYXNzTmFtZSA9ICcnLCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IHtcblx0aWYoIGxpbmsgKSB7XG5cdFx0Y29uc3QgTGlua0NvbXBvbmVudCA9IGxpbmtDb21wb25lbnQ7XG5cblx0XHQvLyBJZiB3ZSBhcmUgdXNpbmcgYSBub3JtYWwgbGlua1xuXHRcdGlmKCBMaW5rQ29tcG9uZW50ID09PSAnYScgKSB7XG5cdFx0XHRhdHRyaWJ1dGVPcHRpb25zLmhyZWYgPSBsaW5rO1xuXHRcdH1cblx0XHQvLyBJZiB3ZSBhcmUgdXNpbmcgYSBsaW5rIGNvbXBvbmVudFxuXHRcdGVsc2UgaWYoIHR5cGVvZiBMaW5rQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0YXR0cmlidXRlT3B0aW9ucy50byA9IGxpbms7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxMaW5rQ29tcG9uZW50XG5cdFx0XHRcdGNsYXNzTmFtZT17IGBhdS1idG4gJHsgY2xhc3NOYW1lIH0gJHsgb3B0aW9uc1sgYXMgXSB9JHsgYmxvY2sgPyAnIGF1LWJ0bi0tYmxvY2snIDogJycgfSR7IGRhcmsgPyAnIGF1LWJ0bi0tZGFyaycgOiAnJyB9YCB9XG5cdFx0XHRcdHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9XG5cdFx0XHQ+XG5cdFx0XHRcdHsgY2hpbGRyZW4gfVxuXHRcdFx0PC9MaW5rQ29tcG9uZW50PlxuXHRcdCk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxidXR0b25cblx0XHRcdFx0dHlwZT17IHR5cGUgfVxuXHRcdFx0XHRjbGFzc05hbWU9eyBgYXUtYnRuICR7IGNsYXNzTmFtZSB9ICR7IG9wdGlvbnNbIGFzIF0gfSR7IGJsb2NrID8gJyBhdS1idG4tLWJsb2NrJyA6ICcnIH0keyBkYXJrID8gJyBhdS1idG4tLWRhcmsnIDogJycgfWAgfVxuXHRcdFx0XHR7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfVxuXHRcdFx0PlxuXHRcdFx0XHR7IGNoaWxkcmVuIH1cblx0XHRcdDwvYnV0dG9uPlxuXHRcdCk7XG5cdH1cbn07XG5cbkFVYnV0dG9uLnByb3BUeXBlcyA9IHtcblx0bGluazogUHJvcFR5cGVzLnN0cmluZyxcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdGFzOiBQcm9wVHlwZXMub25lT2YoWyAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndGVydGlhcnknIF0pLmlzUmVxdWlyZWQsXG5cdGRhcms6IFByb3BUeXBlcy5ib29sLFxuXHR0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRibG9jazogUHJvcFR5cGVzLmJvb2wsXG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0bGlua0NvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jIF0pLFxufTtcblxuQVVidXR0b24uZGVmYXVsdFByb3BzID0ge1xuXHR0eXBlOiAnYnV0dG9uJyxcblx0YXM6ICdwcmltYXJ5Jyxcblx0bGlua0NvbXBvbmVudDogJ2EnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQVVidXR0b247XG4iXX0=