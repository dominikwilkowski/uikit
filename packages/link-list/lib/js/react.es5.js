'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUlinkListItem=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/link-list v3.0.4 *//***************************************************************************************************************************************************************
 *
 * link-lists function
 *
 * A simple list of inline links.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * An item inside the AUlinkList component
 *
 * @param  {node}   text             - The link Text or link html
 * @param  {string} link             - The link URL, optional
 * @param  {string} linkComponent    - The component used for the link
 * @param  {object} li               - An additional object to be spread into the wrapping element, optional
 * @param  {object} attributeOptions - Any other attribute options, optional
 */var AUlinkListItem=function AUlinkListItem(_ref){var text=_ref.text,link=_ref.link,linkComponent=_ref.linkComponent,_ref$li=_ref.li,li=_ref$li===undefined?{}:_ref$li,children=_ref.children,attributeOptions=_objectWithoutProperties(_ref,['text','link','linkComponent','li','children']);var LinkComponent=linkComponent;// If there is no link provided and an onClick function
if(typeof onClick==='function'){attributeOptions.onClick=onClick;// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link='#'}}// If we are using a normal link
if(LinkComponent==='a'){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==='function'){attributeOptions.to=link}if(link){return _react2.default.createElement('li',li,_react2.default.createElement(LinkComponent,attributeOptions,text),children)}return _react2.default.createElement('li',li,text,children)};exports.AUlinkListItem=AUlinkListItem;AUlinkListItem.propTypes={text:_propTypes2.default.node.isRequired,link:_propTypes2.default.string,li:_propTypes2.default.object,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUlinkListItem.defaultProps={linkComponent:'a'};/**
 * DEFAULT
 * The Link List component
 *
 * @param  {array}   items            - All items inside the link list to be passed to AUlinkListItem, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options, optional
 */var AUlinkList=function AUlinkList(_ref2){var inline=_ref2.inline,items=_ref2.items,linkComponent=_ref2.linkComponent,_ref2$className=_ref2.className,className=_ref2$className===undefined?'':_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,['inline','items','linkComponent','className']);return _react2.default.createElement('ul',_extends({className:'au-link-list '+className+(inline?' au-link-list--inline':'')},attributeOptions),items.map(function(item,i){return _react2.default.createElement(AUlinkListItem,_extends({linkComponent:linkComponent,key:i},item))}))};AUlinkList.propTypes={inline:_propTypes2.default.bool,items:_propTypes2.default.arrayOf(_propTypes2.default.shape({link:_propTypes2.default.string,text:_propTypes2.default.node.isRequired,li:_propTypes2.default.object})).isRequired,linkComponent:_propTypes2.default.oneOfType([_propTypes2.default.string,_propTypes2.default.func])};AUlinkList.defaultProps={linkComponent:'a'};exports.default=AUlinkList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVWxpbmtMaXN0SXRlbSIsInRleHQiLCJsaW5rIiwibGlua0NvbXBvbmVudCIsImxpIiwiY2hpbGRyZW4iLCJhdHRyaWJ1dGVPcHRpb25zIiwiTGlua0NvbXBvbmVudCIsIm9uQ2xpY2siLCJocmVmIiwidG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJub2RlIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsIm9iamVjdCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiLCJBVWxpbmtMaXN0IiwiaW5saW5lIiwiaXRlbXMiLCJjbGFzc05hbWUiLCJtYXAiLCJpdGVtIiwiaSIsImJvb2wiLCJhcnJheU9mIiwic2hhcGUiXSwibWFwcGluZ3MiOiJxVUFTQSw0QiwyQ0FDQSxxQyxtREFNQSw2QixxUkFoQkEsK0JBQ0E7Ozs7OztnS0FZQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7Ozs7R0FTTyxHQUFNQSxnQkFBaUIsUUFBakJBLGVBQWlCLE1BQTJFLElBQXhFQyxLQUF3RSxNQUF4RUEsSUFBd0UsQ0FBbEVDLElBQWtFLE1BQWxFQSxJQUFrRSxDQUE1REMsYUFBNEQsTUFBNURBLGFBQTRELGNBQTdDQyxFQUE2QyxDQUE3Q0EsRUFBNkMscUJBQXhDLEVBQXdDLFNBQXBDQyxRQUFvQyxNQUFwQ0EsUUFBb0MsQ0FBdkJDLGdCQUF1QixnRkFDeEcsR0FBTUMsZUFBZ0JKLGFBQXRCLENBRUE7QUFDQSxHQUFJLE1BQU9LLFFBQVAsR0FBbUIsVUFBdkIsQ0FBb0MsQ0FDbkNGLGlCQUFpQkUsT0FBakIsQ0FBMkJBLE9BQTNCLENBRUE7QUFDQSxHQUFJLENBQUNOLElBQUwsQ0FBWSxDQUNYQSxLQUFPLEdBQ1AsQ0FDRCxDQUVEO0FBQ0EsR0FBSUssZ0JBQWtCLEdBQXRCLENBQTRCLENBQzNCRCxpQkFBaUJHLElBQWpCLENBQXdCUCxJQUN4QixDQUNEO0FBSEEsSUFJSyxJQUFJLE1BQU9LLGNBQVAsR0FBeUIsVUFBN0IsQ0FBMEMsQ0FDOUNELGlCQUFpQkksRUFBakIsQ0FBc0JSLElBQ3RCLENBRUQsR0FBSUEsSUFBSixDQUFVLENBQ1QsTUFDQyxvQ0FBU0UsRUFBVCxDQUNDLDhCQUFDLGFBQUQsQ0FBb0JFLGdCQUFwQixDQUF5Q0wsSUFBekMsQ0FERCxDQUVHSSxRQUZILENBS0QsQ0FFRCxNQUFTLG9DQUFTRCxFQUFULENBQWdCSCxJQUFoQixDQUF3QkksUUFBeEIsQ0FDVCxDQWhDTSxDLHNDQWtDUEwsZUFBZVcsU0FBZixDQUEyQixDQUMxQlYsS0FBTVcsb0JBQVVDLElBQVYsQ0FBZUMsVUFESyxDQUUxQlosS0FBTVUsb0JBQVVHLE1BRlUsQ0FHMUJYLEdBQUlRLG9CQUFVSSxNQUhZLENBSTFCYixjQUFlUyxvQkFBVUssU0FBVixDQUFvQixDQUFFTCxvQkFBVUcsTUFBWixDQUFvQkgsb0JBQVVNLElBQTlCLENBQXBCLENBSlcsQ0FBM0IsQ0FPQWxCLGVBQWVtQixZQUFmLENBQThCLENBQzdCaEIsY0FBZSxHQURjLENBQTlCLENBS0E7Ozs7Ozs7O0dBU0EsR0FBTWlCLFlBQWEsUUFBYkEsV0FBYSxXQUFHQyxPQUFILE9BQUdBLE1BQUgsQ0FBV0MsS0FBWCxPQUFXQSxLQUFYLENBQWtCbkIsYUFBbEIsT0FBa0JBLGFBQWxCLHVCQUFpQ29CLFNBQWpDLENBQWlDQSxTQUFqQyw2QkFBNkMsRUFBN0MsaUJBQW9EakIsZ0JBQXBELHNGQUNsQiw4Q0FBSSwwQkFBNkJpQixTQUE3QixFQUEyQ0YsT0FBUyx1QkFBVCxDQUFtQyxFQUE5RSxDQUFKLEVBQStGZixnQkFBL0YsRUFFRWdCLE1BQU1FLEdBQU4sQ0FDQyxTQUFFQyxJQUFGLENBQVFDLENBQVIsUUFBZSwrQkFBQyxjQUFELFdBQWdCLGNBQWdCdkIsYUFBaEMsQ0FBZ0QsSUFBTXVCLENBQXRELEVBQStERCxJQUEvRCxFQUFmLENBREQsQ0FGRixDQURrQixDQUFuQixDQVVBTCxXQUFXVCxTQUFYLENBQXVCLENBQ3RCVSxPQUFRVCxvQkFBVWUsSUFESSxDQUV0QkwsTUFBT1Ysb0JBQVVnQixPQUFWLENBQ05oQixvQkFBVWlCLEtBQVYsQ0FBZ0IsQ0FDZjNCLEtBQU1VLG9CQUFVRyxNQURELENBRWZkLEtBQU1XLG9CQUFVQyxJQUFWLENBQWVDLFVBRk4sQ0FHZlYsR0FBSVEsb0JBQVVJLE1BSEMsQ0FBaEIsQ0FETSxFQU1MRixVQVJvQixDQVN0QlgsY0FBZVMsb0JBQVVLLFNBQVYsQ0FBb0IsQ0FBRUwsb0JBQVVHLE1BQVosQ0FBb0JILG9CQUFVTSxJQUE5QixDQUFwQixDQVRPLENBQXZCLENBWUFFLFdBQVdELFlBQVgsQ0FBMEIsQ0FDekJoQixjQUFlLEdBRFUsQ0FBMUIsQyxnQkFLZWlCLFUiLCJmaWxlIjoicmVhY3QuZXM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb3YuYXUvbGluay1saXN0IHYzLjAuNCAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcbiAqIGxpbmstbGlzdHMgZnVuY3Rpb25cbiAqXG4gKiBBIHNpbXBsZSBsaXN0IG9mIGlubGluZSBsaW5rcy5cbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4vKipcbiAqIEFuIGl0ZW0gaW5zaWRlIHRoZSBBVWxpbmtMaXN0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge25vZGV9ICAgdGV4dCAgICAgICAgICAgICAtIFRoZSBsaW5rIFRleHQgb3IgbGluayBodG1sXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmsgICAgICAgICAgICAgLSBUaGUgbGluayBVUkwsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmtDb21wb25lbnQgICAgLSBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBsaW5rXG4gKiBAcGFyYW0gIHtvYmplY3R9IGxpICAgICAgICAgICAgICAgLSBBbiBhZGRpdGlvbmFsIG9iamVjdCB0byBiZSBzcHJlYWQgaW50byB0aGUgd3JhcHBpbmcgZWxlbWVudCwgb3B0aW9uYWxcbiAqIEBwYXJhbSAge29iamVjdH0gYXR0cmlidXRlT3B0aW9ucyAtIEFueSBvdGhlciBhdHRyaWJ1dGUgb3B0aW9ucywgb3B0aW9uYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEFVbGlua0xpc3RJdGVtID0gKHsgdGV4dCwgbGluaywgbGlua0NvbXBvbmVudCwgbGkgPSB7fSwgY2hpbGRyZW4sIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4ge1xuXHRjb25zdCBMaW5rQ29tcG9uZW50ID0gbGlua0NvbXBvbmVudDtcblxuXHQvLyBJZiB0aGVyZSBpcyBubyBsaW5rIHByb3ZpZGVkIGFuZCBhbiBvbkNsaWNrIGZ1bmN0aW9uXG5cdGlmKCB0eXBlb2Ygb25DbGljayA9PT0gJ2Z1bmN0aW9uJyApIHtcblx0XHRhdHRyaWJ1dGVPcHRpb25zLm9uQ2xpY2sgPSBvbkNsaWNrO1xuXG5cdFx0Ly8gaWYgd2UgZmluZCBhbiBvbkNsaWNrIGV2ZW50IGJ1dCBubyBsaW5rIHdlIG1ha2UgaXQgYSBsaW5rIHNvIG9uQ2xpY2sgY2FuIGJlIGFkZGVkIChubyBidXR0b24gc3VwcG9ydCB5ZXQpXG5cdFx0aWYoICFsaW5rICkge1xuXHRcdFx0bGluayA9ICcjJztcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBhcmUgdXNpbmcgYSBub3JtYWwgbGlua1xuXHRpZiggTGlua0NvbXBvbmVudCA9PT0gJ2EnICkge1xuXHRcdGF0dHJpYnV0ZU9wdGlvbnMuaHJlZiA9IGxpbms7XG5cdH1cblx0Ly8gSWYgd2UgYXJlIHVzaW5nIGEgbGluayBjb21wb25lbnRcblx0ZWxzZSBpZiggdHlwZW9mIExpbmtDb21wb25lbnQgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0YXR0cmlidXRlT3B0aW9ucy50byA9IGxpbms7XG5cdH1cblxuXHRpZiggbGluayApe1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8bGkgeyAuLi5saSB9PlxuXHRcdFx0XHQ8TGlua0NvbXBvbmVudCB7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfT57IHRleHQgfTwvTGlua0NvbXBvbmVudD5cblx0XHRcdFx0eyBjaGlsZHJlbiB9XG5cdFx0XHQ8L2xpPlxuXHRcdClcblx0fVxuXG5cdHJldHVybiAoIDxsaSB7IC4uLmxpIH0+eyB0ZXh0IH17IGNoaWxkcmVuIH08L2xpPiApO1xufTtcblxuQVVsaW5rTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuXHR0ZXh0OiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0bGlua0NvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jIF0pXG59O1xuXG5BVWxpbmtMaXN0SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG5cdGxpbmtDb21wb25lbnQ6IFwiYVwiLFxufTtcblxuXG4vKipcbiAqIERFRkFVTFRcbiAqIFRoZSBMaW5rIExpc3QgY29tcG9uZW50XG4gKlxuICogQHBhcmFtICB7YXJyYXl9ICAgaXRlbXMgICAgICAgICAgICAtIEFsbCBpdGVtcyBpbnNpZGUgdGhlIGxpbmsgbGlzdCB0byBiZSBwYXNzZWQgdG8gQVVsaW5rTGlzdEl0ZW0sIGZvcm1hdDogeyBsaW5rOiAnJywgdGV4dDogJycsIG9uQ2xpY2s6ICgpIH1cbiAqIEBwYXJhbSAge3N0cmluZ30gIGNsYXNzTmFtZSAgICAgICAgLSBBbiBhZGRpdGlvbmFsIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7c3RyaW5nfSAgbGlua0NvbXBvbmVudCAgICAtIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGxpbmtcbiAqIEBwYXJhbSAge29iamVjdH0gIGF0dHJpYnV0ZU9wdGlvbnMgLSBBbnkgb3RoZXIgYXR0cmlidXRlIG9wdGlvbnMsIG9wdGlvbmFsXG4gKi9cbmNvbnN0IEFVbGlua0xpc3QgPSAoeyBpbmxpbmUsIGl0ZW1zLCBsaW5rQ29tcG9uZW50LCBjbGFzc05hbWUgPSAnJywgLi4uYXR0cmlidXRlT3B0aW9ucyB9KSA9PiAoXG5cdDx1bCBjbGFzc05hbWU9eyBgYXUtbGluay1saXN0ICR7IGNsYXNzTmFtZSB9JHsgaW5saW5lID8gJyBhdS1saW5rLWxpc3QtLWlubGluZScgOiAnJyB9YCB9IHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9PlxuXHRcdHtcblx0XHRcdGl0ZW1zLm1hcChcblx0XHRcdFx0KCBpdGVtLCBpICkgPT4gPEFVbGlua0xpc3RJdGVtIGxpbmtDb21wb25lbnQ9eyBsaW5rQ29tcG9uZW50IH0ga2V5PXsgaSB9IHsgLi4uaXRlbSB9IC8+XG5cdFx0XHQpXG5cdFx0fVxuXHQ8L3VsPlxuKTtcblxuQVVsaW5rTGlzdC5wcm9wVHlwZXMgPSB7XG5cdGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG5cdGl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcblx0XHRQcm9wVHlwZXMuc2hhcGUoe1xuXHRcdFx0bGluazogUHJvcFR5cGVzLnN0cmluZyxcblx0XHRcdHRleHQ6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdFx0XHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0XHR9KVxuXHQpLmlzUmVxdWlyZWQsXG5cdGxpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoWyBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYyBdKVxufTtcblxuQVVsaW5rTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG5cdGxpbmtDb21wb25lbnQ6IFwiYVwiLFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBBVWxpbmtMaXN0O1xuIl19